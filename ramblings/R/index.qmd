---
title: "R"
description: "A worthy collection of short R commands and tricks "
author: "LW Pembleton"
date-modified: last-modified
categories: [R]
image: images/daria-nepriakhina-kXDHR_bXIZo-unsplash.jpg
draft: false
highlight-style: ayu
---

![~Photo¬†by¬†Daria¬†Nepriakhina¬†on¬†Unsplash~](images/daria-nepriakhina-kXDHR_bXIZo-unsplash.jpg)

## Using {custom_annotation} to embed one plots inside another.

Embedded plots can be a powerful tool for showcasing data across an extended axis while still emphasizing specific sections.

Creating these are very easy. Here is a quick guide and example:

**Step 1:** Create your base plot.

Begin by establishing your base plot, which will serve as the canvas for your embedded plot. Typically, the base plot is the primary focus of your visualization.

```{r, warning = FALSE, message = FALSE}
library(tidyverse)
library(mdthemes)
data(mtcars)

base_plot <- ggplot(mtcars, aes(hp, mpg)) +
  geom_point(size = 4, alpha = 0.6, colour = "#22333b") +
  geom_smooth(size = 1.5, se = F, colour = "#3a86ff") +
  labs(title = "Example of a plot **embedded** within another",
    subtitle = "Using the function *'annotation_custom()'*") +
  md_theme_bw() +
  xlim(50, 200)
```

**Step 2:** Create your plot that you want to embed within the canvas.

Your embedded plot doesn't have to be the same type as your base plot. Feel free to customize it according to your data visualization needs.

```{r, warning = FALSE, message = FALSE}
embedded_plot <- ggplot(mtcars, aes(hp, mpg)) +
  geom_point(size = 4, alpha = 0.6, colour = "#22333b") +
  geom_smooth(size = 1.5, se = F, colour = "#3a86ff") +
  md_theme_bw()
```

**Step 3:** Use `custom_annotate()` to embed the plot.

Now, it's time to embed the plot within the canvas using the **`annotation_custom()`** function. You'll need to specify the X and Y positions for the embedded plot:

```{r, warning = FALSE, message = FALSE}
base_plot + annotation_custom(ggplotGrob(embedded_plot), 
                              xmin = 125, 
                              xmax = 200, 
                              ymin = 22, 
                              ymax = 35)
```

## Adding linking colours to plot titles instead of a legend

Enhancing your plot titles with linking colours üåà is a clever strategy to maximise your plot realestate by eliminating legends, all while looking fantastic!

```{r, warning = FALSE, message = FALSE, echo = FALSE}
library(ggplot2) # For plotting
library(palmerpenguins) # For the example penguin dataset
library(ggtext) # For HTML rendering of text to support colour
                # Also for Markdown rendering of text

ggplot(data = penguins, 
       aes(x = flipper_length_mm, 
           y = body_mass_g)) +
  geom_point(aes(color = species, 
                 shape = species),
                 size = 2) +
  scale_color_manual(values = c("#FF8C00","#9932CC","#008B8B")) +
  labs(title = "Penguin flipper length versus body mass",
       subtitle = "Penguin species
       <span style='color:#FF8C00;'>*Pygoscelis adeliae*</span>, 
       <span style='color:#9932CC;'>*Pygoscelis papua*</span> and 
       <span style='color:#008B8B;'>*Pygoscelis antarcticus*</span>",
       x = "Flipper Length (mm)",
       y = "Body Mass (g)")  +
  theme_minimal() +
  theme(panel.grid = element_blank(),
        plot.subtitle = element_markdown(),
        legend.position = "none")

```

To achieve this style you will need:

1.  the [{ggtext}](https://wilkelab.org/ggtext/) package which will perform the [HTML rendering](https://www.w3schools.com/tags/tag_span.asp), in this case in the subtitle to define the text colour.

2.  Adding `plot.subtitle = element_markdown()` to the theme, [{ggtext}](https://wilkelab.org/ggtext/) will perform [markdown rendering](https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax#styling-text), for example making specific text bold, or in the above example, italicised.

3.  and finally, adding `legend.position = "none"` also to the theme will remove the old clunky default legend

Here is the full code üëá enjoy!

```{r, eval = FALSE}
library(ggplot2) # For plotting
library(palmerpenguins) # For the example penguin dataset
library(ggtext) # For HTML rendering of text to support colour
                # Also for Markdown rendering of text

ggplot(data = penguins, 
       aes(x = flipper_length_mm, 
           y = body_mass_g)) +
  geom_point(aes(color = species, 
                 shape = species),
                 size = 2) +
  scale_color_manual(values = c("#FF8C00","#9932CC","#008B8B")) +
  labs(title = "Penguin flipper length versus body mass",
       subtitle = "Penguin species
       <span style='color:#FF8C00;'>*Pygoscelis adeliae*</span>, 
       <span style='color:#9932CC;'>*Pygoscelis papua*</span> and 
       <span style='color:#008B8B;'>*Pygoscelis antarcticus*</span>",
       x = "Flipper Length (mm)",
       y = "Body Mass (g)")  +
  theme_minimal() +
  theme(panel.grid = element_blank(),
        plot.subtitle = element_markdown(),
        legend.position = "none")

```

If you want to go a step further you can add the corresponding point shape/symbol to the subtitle as wellüéâ

```{r, warning = FALSE, message = FALSE, echo = FALSE}
library(ggplot2) # For plotting
library(palmerpenguins) # For the example penguin dataset
library(ggtext) # For HTML rendering of text to support colour
# Also for Markdown rendering of text
# Get HTML code for genometric symbols from:
# https://www.htmlsymbols.xyz/geometric-symbols

ggplot(data = penguins, 
       aes(x = flipper_length_mm, 
           y = body_mass_g)) +
  geom_point(aes(color = species, 
                 shape = species),
             size = 2) +
  scale_color_manual(values = c("#FF8C00","#9932CC","#008B8B")) +
  labs(title = "Penguin flipper length versus body mass",
       subtitle = "Penguin species
       <span style='color:#FF8C00;'>*Pygoscelis adeliae* &#9679;</span>, 
       <span style='color:#9932CC;'>*Pygoscelis papua* &#11205;</span> and 
       <span style='color:#008B8B;'>*Pygoscelis antarcticus* &#11200;</span>",
       x = "Flipper Length (mm)",
       y = "Body Mass (g)")  +
  theme_minimal() +
  theme(panel.grid = element_blank(),
        plot.subtitle = element_markdown(),
        legend.position = "none")
```

All you need to do is add the HTML Unicode (e.g. &#9679 for ‚óè) for the matching symbol/shape to the subtitle. You can look up the HTML Unicode [here](https://www.htmlsymbols.xyz/geometric-symbols).

::: callout-note
For some reason when viewing the plot in the Rstudio plot tab, additional spaces (relative to the length of the Unicode) will appear next to the symbols. However, this disappears when you render the image in a quarto document or save the plot as an image.

![](images/unicode_space.png)
:::

Here is the full code üëá enjoy!

```{r, eval = FALSE}
library(ggplot2) # For plotting
library(palmerpenguins) # For the example penguin dataset
library(ggtext) # For HTML rendering of text to support colour
# Also for Markdown rendering of text
# Get HTML code for genometric symbols from:
# https://www.htmlsymbols.xyz/geometric-symbols

ggplot(data = penguins, 
       aes(x = flipper_length_mm, 
           y = body_mass_g)) +
  geom_point(aes(color = species, 
                 shape = species),
             size = 2) +
  scale_color_manual(values = c("#FF8C00","#9932CC","#008B8B")) +
  labs(title = "Penguin flipper length versus body mass",
       subtitle = "Penguin species
       <span style='color:#FF8C00;'>*Pygoscelis adeliae* &#9679;</span>, 
       <span style='color:#9932CC;'>*Pygoscelis papua* &#11205;</span> and 
       <span style='color:#008B8B;'>*Pygoscelis antarcticus* &#11200;</span>",
       x = "Flipper Length (mm)",
       y = "Body Mass (g)")  +
  theme_minimal() +
  theme(panel.grid = element_blank(),
        plot.subtitle = element_markdown(),
        legend.position = "none")
```
